import { useState, useEffect } from "react";
import axios from "axios";
import EditModal from "./EditModal"; // Import Modal
import EditModall from "./editModal_copy"; // Import Modal

export function TableItem({
  selectedBranch,
  onSelectProduct,
  searchQuery,
}) {
  const [productDetails, setProductDetails] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isModalOpen1, setIsModalOpen1] = useState(false);
  const [selectedProductId, setSelectedProductId] = useState(null);
  const [selectedBranchId, setSelectedBranchId] = useState(null);

  // üìå **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà**
  const fetchProductDetails = async (branchId) => {
    setIsLoading(true);
    setError(null);
  
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("Token not found");
  
      let url = "http://192.168.195.75:5000/v1/product/stock/all";
      if (branchId && branchId !== "") {
        url = `http://192.168.195.75:5000/v1/product/stock/product-bybranch/${branchId}`;
      }
  
      const response = await axios.get(url, {
        headers: {
          Authorization: token,
          "Content-Type": "application/json",
          "x-api-key": "1234567890abcdef",
        },
      });
  
      if (!response.data || !response.data.data) {
        throw new Error("Invalid API response");
      }
  
      const responseData = response.data.data;
  
      let allProductDetails = [];
  
      if (Array.isArray(responseData)) {
        // üîπ Case: `product-bybranch` returns an array
        allProductDetails = responseData.map((item) => ({
          ...item,
          branch_name: branchId === "1" ? "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£ (‡πÇ‡∏Ñ‡∏Å‡∏Ç‡∏≤‡∏°)"
            : branchId === "2" ? "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤)"
            : branchId === "3" ? "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ (‡∏ô‡∏û‡∏ß‡∏á‡∏®‡πå)"
            : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤",
        }));
      } else {
        // üîπ Case: `all-product` returns an object with branch keys
        const { product_samutsakhon, product_chonburi, product_pathumthani } = responseData;
        
        allProductDetails = [
          ...(product_samutsakhon || []).map((item) => ({ ...item, branch_name: "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£ (‡πÇ‡∏Ñ‡∏Å‡∏Ç‡∏≤‡∏°)" })),
          ...(product_chonburi || []).map((item) => ({ ...item, branch_name: "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤)" })),
          ...(product_pathumthani || []).map((item) => ({ ...item, branch_name: "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ (‡∏ô‡∏û‡∏ß‡∏á‡∏®‡πå)" })),
        ];
      }
  
      setProductDetails(allProductDetails);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };
  
  useEffect(() => {
    fetchProductDetails(selectedBranch);
  }, [selectedBranch]);

  const openModal = (productId, branchId) => {
    setSelectedProductId(productId);
    setSelectedBranchId(branchId);
    setIsModalOpen1(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setIsModalOpen1(false);
    setSelectedProductId(null);
  };

  // üìå **‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤**
  const filteredProducts = productDetails.filter((product) => {
    return (
      product.product_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.product_code.toLowerCase().includes(searchQuery.toLowerCase())
    );
  });

  if (error)
    return <div className="text-center text-red-600">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</div>;

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-gray-700 mb-4">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
      <div className="overflow-x-auto max-h-[calc(100vh-250px)]">
        <table className="w-full table-auto border-collapse border shadow-sm">
          <thead className="bg-blue-200 text-blue-900 w-96 h-14">
            <tr>
              <th className="border p-2 text-center rounded-tl-lg rounded-br-sm">‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà</th>
              <th className="border p-2 text-center">‡∏™‡∏≤‡∏Ç‡∏≤</th>
              <th className="border p-2 text-center">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th className="border p-2 text-center">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th className="border p-2 text-center">‡∏Ç‡∏ô‡∏≤‡∏î</th>
              <th className="border p-2 text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô</th>
              <th className="border p-2 text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏à‡∏≠‡∏á</th>
              <th className="border p-2 text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å</th>
              <th className="border p-2 text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
              <th className="border p-2 text-center">‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th className="border p-2 text-center rounded-tr-lg rounded-br-sm">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
            </tr>
          </thead>
          <tbody>
            {filteredProducts.length === 0 ? (
              <tr>
                <td colSpan="9" className="text-center text-gray-600">
                  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
                </td>
              </tr>
            ) : (
              filteredProducts.map((product, index) => (
                <tr key={`${product.product_id}-${index}`}>
                  <td className="border p-2 text-center">{index + 1}</td>
                  <td className="border p-2 text-center">{product.branch_name}</td>
                  <td className="border p-2 text-center">{product.product_code || "-"}</td>
                  <td className="border p-2 text-center">{product.product_name || "-"}</td>
                  <td className="border p-2 text-center">{product.product_size || "-"}</td>
                  <td className="border p-2 text-center">{product.product_quantity || 0}</td>
                  <td className="border p-2 text-center text-red-700">
                    {product.total_reserved_quantity !== null ? product.total_reserved_quantity : 0}
                  </td>
                  <td className="border p-2 text-center">{0}</td>
                  <td className="border p-2 text-center">{product.product_quantity || 0}</td>
                  <td className="border p-2 text-center">
                    <button
                      className="bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600"
                      onClick={() => onSelectProduct(product.product_id)}
                    >
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    </button>
                  </td>
                  <td className="border p-2 text-center">
                    <button
                      className="bg-gray-500 text-white px-2 py-1 rounded-md hover:bg-gray-800"
                      onClick={() => openModal(product.product_id, product.product_branch)}
                    >
                      ‡πÄ‡∏û‡∏¥‡πà‡∏° <i className="fa-solid fa-prescription-bottle-medical"></i>
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      <EditModal
        isModalOpen={isModalOpen}
        handleClose={closeModal}
        id={selectedProductId}
      />
      <EditModall
        isModalOpen={isModalOpen1}
        handleClose={closeModal}
        id={selectedProductId}
        branch_id={selectedBranchId}
      />
    </div>
  );
}

export default TableItem;
